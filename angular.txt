Assessment 1



Here's how you can implement both of your Angular directive requirements:

---

## ‚úÖ 1. `textchange.directive.ts` ‚Äî Add Random Number Element to the DOM

**Path**: `src/directives/textchange.directive.ts`

### üìå Task:

Create a method that dynamically **adds an element** to the DOM with a random number as text.

### ‚úÖ Implementation:

```ts
import { Directive, ElementRef, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appTextChange]'
})
export class TextChangeDirective {
  constructor(private el: ElementRef, private renderer: Renderer2) {}

  generateRandomNumberElement() {
    const randomNumber = Math.floor(Math.random() * 1000);
    const span = this.renderer.createElement('span');
    const text = this.renderer.createText(`Random Number: ${randomNumber}`);
    this.renderer.appendChild(span, text);
    this.renderer.appendChild(this.el.nativeElement, span);
  }
}
```

### üîß Usage:

You can call `generateRandomNumberElement()` from your component or bind it to an event via `@HostListener` if needed.

---

## ‚úÖ 2. `basiccol.directive.ts` ‚Äî Show a Box with Hover Color Change

**Path**: `src/directives/basiccol.directive.ts`

### üìå Task:

Create a method that:

* Appends a box (`div`) below the element
* Shows it only after generating a random number
* Changes color on hover

### ‚úÖ Implementation:

```ts
import { Directive, ElementRef, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appBasicCol]'
})
export class BasicColDirective {
  private box: HTMLElement | null = null;

  constructor(private el: ElementRef, private renderer: Renderer2) {}

  showBoxWithRandomNumber() {
    const randomNumber = Math.floor(Math.random() * 1000);
    
    if (!this.box) {
      this.box = this.renderer.createElement('div');
      this.renderer.setStyle(this.box, 'margin-top', '10px');
      this.renderer.setStyle(this.box, 'padding', '10px');
      this.renderer.setStyle(this.box, 'border', '1px solid black');
      this.renderer.setStyle(this.box, 'width', 'fit-content');
      this.renderer.setStyle(this.box, 'transition', 'background-color 0.3s');

      // Hover effect
      this.renderer.listen(this.box, 'mouseenter', () => {
        this.renderer.setStyle(this.box!, 'background-color', '#d1e7dd');
      });
      this.renderer.listen(this.box, 'mouseleave', () => {
        this.renderer.setStyle(this.box!, 'background-color', 'transparent');
      });

      this.renderer.appendChild(this.el.nativeElement, this.box);
    }

    this.box.textContent = `Generated Number: ${randomNumber}`;
    this.renderer.setStyle(this.box, 'display', 'block');
  }
}
```

### üß™ Usage in Component Template:

```html
<div appTextChange appBasicCol #directiveRef="ngModel">
  <button (click)="onGenerate()">Generate</button>
</div>
```

And in your component:

```ts
@ViewChild(TextChangeDirective) textChange!: TextChangeDirective;
@ViewChild(BasicColDirective) basicCol!: BasicColDirective;

onGenerate() {
  this.textChange.generateRandomNumberElement();
  this.basicCol.showBoxWithRandomNumber();
}
```

---

Let me know if you want to integrate these directives with a form, add animations, or trigger them with host events (`@HostListener`).



Q.3 
The provided Angular component code is mostly correct **except for one small formatting issue**: **inconsistent or improper spacing and newline usage** might cause issues in certain setups, especially when copying/pasting or editing in a non-standard editor.

### ‚úÖ Corrected Version:

Here is the corrected and properly formatted version of the `AppComponent` class:

```ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: '<h1>Hello, {{ name }}</h1>'
})
export class AppComponent {
  name: string = 'John Doe';
}
```

### Summary of Fixes:

* Removed extra blank lines and fixed indentation.
* Ensured consistent spacing around curly braces and key-value pairs.
* Ensured the `AppComponent` class declaration is properly opened and closed.

### Optional Enhancements (not necessary, but good practice):

* You could replace the inline template with `templateUrl` if using external HTML.
* Add `styleUrls` or `styles` if styling is needed.

Let me know if you'd like to use an external template or include styling as well.


Q5.
Your Angular template contains multiple issues that prevent it from properly binding to the `items` property. Below is a breakdown of the **problems** and then the **corrected version**.

---

### ‚ùå Issues Identified:

1. **Incorrect directive name:** `lingFor` is a typo. The correct Angular directive is `*ngFor`.
2. **Malformed HTML:**

   * `<ul><lingFor="...">{{ item }}</li>` is invalid.
   * The `<ul>` tag is not properly closed.
   * The `<li>` tag is not properly opened.
3. **Stray text:** There's a stray `I` after the closing `<ul>` tag.
4. **Formatting:** Component metadata isn't consistently indented.

---

### ‚úÖ Corrected Version:

```ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-item-list',
  template: `
    <ul>
      <li *ngFor="let item of items">{{ item }}</li>
    </ul>
  `
})
export class ItemListComponent {
  items: string[] = ['Item 1', 'Item 2', 'Item 3'];
}
```

---

Let me know if you'd like to render this in a styled card format or interactively display additional info on click.



Q7.
The issue in the provided Angular component is that the `DataService` is being **declared as a parameter in the constructor but not marked as a dependency** using **access modifiers like `private` or `public`**, so Angular's dependency injection system doesn't recognize it.

---

### ‚ùå Problem:

```ts
constructor(dataService: DataService) {
  this.data = dataService.getData();
}
```

This does **not** tell Angular to inject `DataService`, because it's missing `private`, `public`, or `protected`.

---

### ‚úÖ Corrected Version:

```ts
import { Component } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-my-component',
  template: '<h1>Data: {{ data }}</h1>'
})
export class MyComponent {
  data: string;

  constructor(private dataService: DataService) {
    this.data = this.dataService.getData();
  }
}
```

---

### Alternatively (shorthand with immediate use):

```ts
constructor(private dataService: DataService) {
  this.data = dataService.getData();
}
```

---

### Key Point:

Always use an **access modifier** (`private`, `public`, or `protected`) in the constructor for Angular to inject the service properly.

Let me know if you'd like to add error handling or make the data fetching asynchronous using `Observable`.



Q9.
The provided Angular component has several **syntax errors and typos** that will cause compilation issues. Let‚Äôs identify and correct each one:

---

### ‚ùå Issues Identified:

1. `I` in the `@Component` block is an extraneous character ‚Äî **remove it**.
2. The `template` has an unclosed `<p>` tag:
   `'<p>Counter: {{ count }}<p>'` ‚Üí should be `</p>` at the end.
3. The class declaration is incorrect:
   `export class Counter Component` ‚Üí **should be** `CounterComponent` (no space).

---

### ‚úÖ Corrected Version:

```ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-counter',
  template: '<p>Counter: {{ count }}</p>'
})
export class CounterComponent {
  count = 0;
}
```

---

Let me know if you‚Äôd like to add buttons to increment or decrement the counter interactively!






Assessment 2

Practical Q1
The provided Angular component has multiple issues:

---

### ‚ùå Issues Identified:

1. **Malformed HTML Template**:

   * `template: <ul>...` ‚Üí should be wrapped in **quotes** (it's not a valid string).
   * `{{ item.name}}` has a misplaced line break.
   * `</ul>'` has a misplaced quote, breaking the syntax.

2. **Incomplete `subscribe()` block**:

   * `this.error` is not completed.
   * Missing **error handling** in the `subscribe()` callback.
   * The call to `this.error` abruptly ends the code.

3. **No initialization of `items` or `error` (optional but good practice)**.

---

### ‚úÖ Corrected Version:

```ts
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-data',
  template: `
    <ul>
      <li *ngFor="let item of items">{{ item.name }}</li>
    </ul>
    <p *ngIf="error" style="color:red;">{{ error }}</p>
  `
})
export class DataComponent implements OnInit {
  items: any[] = [];
  error: string = '';

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.http.get<any[]>('https://api.example.com/data').subscribe({
      next: (data) => {
        this.items = data;
        this.error = '';
      },
      error: (err) => {
        this.error = 'Failed to load data.';
        console.error('Error fetching data:', err);
      }
    });
  }
}
```

---

### ‚úÖ Key Fixes:

* Template string wrapped with backticks (`` ` ``) to support multiline HTML.
* `*ngFor` loop corrected.
* `subscribe()` replaced with an object having `next` and `error` for clearer handling.
* Added fallback error message display using `*ngIf`.

Let me know if you'd like to handle loading indicators or use `catchError` with RxJS operators instead.



2
There are several issues in the provided Angular component related to the use of the async pipe and the declaration of `items`.

---

### ‚ùå Issues:

1. **`items` is declared as an array (`any[]`) but should be an `Observable<any[]>`** to use the async pipe.
2. The **template string is not wrapped in quotes/backticks** (syntax error).
3. The template has a **misplaced quote** at the end.
4. The `async` pipe is used correctly, but the data source must be an Observable.

---

### ‚úÖ Corrected Version:

```ts
import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { DataService } from './data.service';

@Component({
  selector: 'app-data',
  template: `
    <ul>
      <li *ngFor="let item of items | async">
        {{ item.name }}
      </li>
    </ul>
  `
})
export class DataComponent {
  items: Observable<any[]>;

  constructor(private dataService: DataService) {
    this.items = this.dataService.getData();
  }
}
```

---

### Explanation:

* `items` is now typed as `Observable<any[]>`, matching what `getData()` presumably returns.
* Template string is wrapped in backticks (`` ` ``) for multiline HTML.
* The `async` pipe in template correctly unwraps the Observable.

---

If you want, I can also help you modify `getData()` in the `DataService` or add error handling with `async` pipe.

3
The Angular directive code you provided has several syntax and formatting issues. Here‚Äôs the problem breakdown and the corrected version:

---

### ‚ùå Issues:

1. **Incorrect import statement:**

   * `import { Directive. ElementRef } from '@angular/core';`
     Should use a comma instead of a dot between `Directive` and `ElementRef`.
2. **Misplaced or missing brackets and commas:**

   * The `@Directive` decorator‚Äôs object literal has a stray `2` and a misplaced comma.
3. **Code formatting issues:**

   * Properties in constructor should be properly spaced and lines completed.
4. **Missing closing bracket for class.**

---

### ‚úÖ Corrected Version:

```ts
import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appCustomDirective]'
})
export class CustomDirective {
  constructor(private elementRef: ElementRef) {
    this.elementRef.nativeElement.style.backgroundColor = 'red';
    this.elementRef.nativeElement.style.color = 'white';
  }
}
```

---

### Explanation:

* Fixed the import statement syntax.
* Cleaned up decorator object syntax.
* Added `this.` before `elementRef` to refer to the injected instance.
* Closed the class properly.

---

Let me know if you want to extend this directive with event listeners or inputs!



4
The provided Angular code snippet has multiple syntax and structural issues around lazy loading setup. I'll identify and correct the issues with a proper example of lazy loading a feature module.

---

### ‚ùå Issues:

1. **Incorrect import syntax:**

   * `import { Router Module. Routes } from '@angular/router;`
     Should be `import { RouterModule, Routes } from '@angular/router';`

2. **Component decorator syntax errors:**

   * Missing quotes in `selector: app-root'`
   * Missing commas between properties
   * Template string should be wrapped properly

3. **Routes array syntax incorrect:**

   * `path: 'dashboard"` ‚Äî inconsistent quotes
   * The route object structure is incomplete
   * `loadChildren` syntax is missing and broken

4. **NgModule syntax errors:**

   * Improper decorators and formatting
   * Misspelled or misplaced class declarations (`putingModule`, `AppRouting Module`)

---

### ‚úÖ Corrected Version for Lazy Loading Setup

```ts
// app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: '<router-outlet></router-outlet>',
})
export class AppComponent {}
```

```ts
// app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: 'dashboard',
    loadChildren: () =>
      import('./dashboard/dashboard.module').then(m => m.DashboardModule),
  },
  { path: '', redirectTo: 'dashboard', pathMatch: 'full' },
  { path: '**', redirectTo: 'dashboard' },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

---

### Explanation:

* `loadChildren` uses a dynamic import with a lambda returning a promise to load the module lazily.
* The routes array objects have proper syntax and quote usage.
* The `AppRoutingModule` imports `RouterModule.forRoot(routes)` and exports `RouterModule`.
* `app.component.ts` includes a `<router-outlet>` placeholder to render routed components.

---

If you want, I can help you with the **dashboard.module.ts** file or feature module routing as well!



5
The Angular component you shared looks mostly fine, but if the issue is about **change detection**, here are the common pitfalls and their fixes:

---

### Possible Issue:

* If the parent component **mutates** the `user` object **without changing its reference**, Angular‚Äôs default change detection strategy (which uses object identity) **won‚Äôt detect the change**.
* So, the component will not update even if `user.name` changes **unless the `user` reference changes**.

---

### How to fix/change detection behavior:

#### 1. **Use `OnPush` Change Detection Strategy (Recommended for Performance)**

This tells Angular to check for changes **only when input references change** or events occur.

```ts
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';

@Component({
  selector: 'app-user',
  template: '<h1>{{ user.name }}</h1>',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class UserComponent {
  @Input() user: any;
}
```

**Note:** When using `OnPush`, always replace the entire `user` object instead of mutating properties to trigger change detection.

---

#### 2. **If you must mutate the object**, inform Angular manually with `ChangeDetectorRef`

```ts
import { Component, Input, ChangeDetectorRef } from '@angular/core';

@Component({
  selector: 'app-user',
  template: '<h1>{{ user.name }}</h1>',
})
export class UserComponent {
  @Input() user: any;

  constructor(private cd: ChangeDetectorRef) {}

  // Call this method after mutating `user`
  detectChanges() {
    this.cd.detectChanges();
  }
}
```

---

### Summary:

* If you want **better performance and explicit control**, use `OnPush` and replace input objects on updates.
* Otherwise, with the default strategy, Angular detects input changes only when the reference changes.

---

If you want me to help with a full example showing parent-child data flow and mutation triggering, just ask!
