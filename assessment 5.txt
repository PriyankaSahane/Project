class MyThread extends Thread {
    public void run() {
        for (int i = 1; i <= 3; i++) {
            System.out.println(getName() + " running: " + i);
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println(getName() + " interrupted");
            }
        }
    }
}

class MyRunnable implements Runnable {
    public void run() {
        for (int i = 1; i <= 3; i++) {
            System.out.println(Thread.currentThread().getName() + " runnable: " + i);
        }
    }
}

class SharedResource {
    synchronized void printNumbers(String threadName) {
        for (int i = 1; i <= 3; i++) {
            System.out.println(threadName + " printing: " + i);
        }
    }

    void synchronizedBlock(String threadName) {
        synchronized (this) {
            for (int i = 1; i <= 3; i++) {
                System.out.println(threadName + " sync block: " + i);
            }
        }
    }
}

class WaitNotifyExample {
    boolean ready = false;

    synchronized void produce() {
        try {
            Thread.sleep(1000);
            ready = true;
            notify();
        } catch (InterruptedException e) {
        }
    }

    synchronized void consume() {
        try {
            while (!ready) {
                wait();
            }
            System.out.println("Consumed after wait-notify");
        } catch (InterruptedException e) {
        }
    }
}

public class MultiThreadDemo {
    public static void main(String[] args) throws InterruptedException {
        MyThread t1 = new MyThread();
        t1.setName("Thread-1");
        t1.setPriority(Thread.MAX_PRIORITY);

        Thread t2 = new Thread(new MyRunnable(), "Thread-2");
        t2.setPriority(Thread.NORM_PRIORITY);

        Thread t3 = new Thread(() -> {
            for (int i = 1; i <= 3; i++) {
                System.out.println(Thread.currentThread().getName() + " lambda: " + i);
            }
        }, "Lambda-Thread");

        Thread t4 = new Thread("Anonymous-Thread") {
            public void run() {
                for (int i = 1; i <= 3; i++) {
                    System.out.println(getName() + " anonymous: " + i);
                }
            }
        };

        t1.start();
        t2.start();
        t3.start();
        t4.start();

        t1.join();
        t2.join();
        t3.join();
        t4.join();

        SharedResource resource = new SharedResource();
        Thread sync1 = new Thread(() -> resource.printNumbers("Sync1"));
        Thread sync2 = new Thread(() -> resource.synchronizedBlock("Sync2"));

        sync1.start();
        sync2.start();

        sync1.join();
        sync2.join();

        WaitNotifyExample wn = new WaitNotifyExample();
        Thread consumer = new Thread(() -> wn.consume());
        Thread producer = new Thread(() -> wn.produce());

        consumer.start();
        producer.start();

        consumer.join();
        producer.join();

        Thread daemonThread = new Thread(() -> {
            while (true) {
                System.out.println("Daemon thread running...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                }
            }
        });
        daemonThread.setDaemon(true);
        daemonThread.start();

        Thread.sleep(2000);
        System.out.println("Main thread exiting");
    }
}




import java.io.*;

class CustomException extends Exception {
    public CustomException(String message) {
        super(message);
    }
}

public class ExceptionHandlingDemo {

    public static void throwException() throws CustomException {
        throw new CustomException("Custom exception occurred");
    }

    public static void throwsClauseMethod() throws IOException {
        FileReader reader = new FileReader("nonexistent.txt");
        reader.read();
        reader.close();
    }

    public static void tryWithResourcesExample() {
        try (BufferedReader br = new BufferedReader(new FileReader("nonexistent.txt"))) {
            System.out.println(br.readLine());
        } catch (IOException e) {
            System.out.println("Try-with-resources Exception: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        try {
            int result = 10 / 0;
        } catch (ArithmeticException e) {
            System.out.println("Caught ArithmeticException: " + e.getMessage());
        }

        try {
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            System.out.println("Caught NullPointerException: " + e.getMessage());
        }

        try {
            int[] arr = new int[2];
            arr[5] = 100;
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Caught ArrayIndexOutOfBoundsException: " + e.getMessage());
        }

        try {
            Object obj = "abc";
            Integer i = (Integer) obj;
        } catch (ClassCastException e) {
            System.out.println("Caught ClassCastException: " + e.getMessage());
        }

        try {
            throwException();
        } catch (CustomException e) {
            System.out.println("Caught CustomException: " + e.getMessage());
        }

        try {
            throwsClauseMethod();
        } catch (IOException e) {
            System.out.println("Caught IOException from throws method: " + e.getMessage());
        }

        tryWithResourcesExample();

        try {
            String str = "test";
            if (str.equals("test")) {
                throw new IllegalArgumentException("Illegal argument passed");
            }
        } catch (IllegalArgumentException e) {
            System.out.println("Caught IllegalArgumentException: " + e.getMessage());
        } finally {
            System.out.println("Finally block executed");
        }
    }
}





import java.util.Arrays;

public class ArrayFunctions {
    public static void main(String[] args) {
        int[] intArray = {5, 2, 9, 1, 3};
        String[] strArray = {"apple", "banana", "cherry"};
        int[] copyArray;

        System.out.println("Length: " + intArray.length);

        Arrays.sort(intArray);
        System.out.println("Sorted: " + Arrays.toString(intArray));

        copyArray = Arrays.copyOf(intArray, intArray.length);
        System.out.println("Copy Of: " + Arrays.toString(copyArray));

        int[] rangeArray = Arrays.copyOfRange(intArray, 1, 4);
        System.out.println("Copy Of Range: " + Arrays.toString(rangeArray));

        Arrays.fill(copyArray, 7);
        System.out.println("Fill: " + Arrays.toString(copyArray));

        System.out.println("Equals: " + Arrays.equals(intArray, copyArray));
        System.out.println("Equals (String): " + Arrays.equals(strArray, new String[]{"apple", "banana", "cherry"}));

        System.out.println("Binary Search (3): " + Arrays.binarySearch(intArray, 3));

        String[] clonedStrArray = strArray.clone();
        System.out.println("Clone: " + Arrays.toString(clonedStrArray));

        Arrays.parallelSort(intArray);
        System.out.println("Parallel Sort: " + Arrays.toString(intArray));

        int[][] multiArray = {
            {1, 2},
            {3, 4}
        };
        System.out.println("Deep ToString: " + Arrays.deepToString(multiArray));

        String[][] strMatrix = {
            {"a", "b"},
            {"c", "d"}
        };
        String[][] strMatrix2 = {
            {"a", "b"},
            {"c", "d"}
        };
        System.out.println("Deep Equals: " + Arrays.deepEquals(strMatrix, strMatrix2));

        System.out.println("As List: " + Arrays.asList("x", "y", "z"));

        Integer[] boxedArray = Arrays.stream(intArray).boxed().toArray(Integer[]::new);
        System.out.println("Boxed: " + Arrays.toString(boxedArray));

        int[] unboxedArray = Arrays.stream(boxedArray).mapToInt(Integer::intValue).toArray();
        System.out.println("Unboxed: " + Arrays.toString(unboxedArray));

        Arrays.setAll(unboxedArray, i -> i * 2);
        System.out.println("Set All: " + Arrays.toString(unboxedArray));

        Arrays.parallelSetAll(unboxedArray, i -> i + 10);
        System.out.println("Parallel Set All: " + Arrays.toString(unboxedArray));
    }
}



public class StringFunctions {
    public static void main(String[] args) {
        String str1 = "Hello World";
        String str2 = "Java Programming";
        String str3 = "   Trim Me   ";
        String str4 = "HELLO WORLD";

        System.out.println("Length: " + str1.length());
        System.out.println("Char at 0: " + str1.charAt(0));
        System.out.println("Substring(0,5): " + str1.substring(0, 5));
        System.out.println("Contains 'World': " + str1.contains("World"));
        System.out.println("Starts with 'Hello': " + str1.startsWith("Hello"));
        System.out.println("Ends with 'World': " + str1.endsWith("World"));
        System.out.println("Index of 'o': " + str1.indexOf('o'));
        System.out.println("Last index of 'o': " + str1.lastIndexOf('o'));
        System.out.println("To Uppercase: " + str2.toUpperCase());
        System.out.println("To Lowercase: " + str2.toLowerCase());
        System.out.println("Trim: " + str3.trim());
        System.out.println("Replace 'Java' with 'Python': " + str2.replace("Java", "Python"));
        System.out.println("Equals: " + str1.equals(str4));
        System.out.println("Equals Ignore Case: " + str1.equalsIgnoreCase(str4));
        System.out.println("Is Empty: " + str1.isEmpty());
        System.out.println("Concat: " + str1.concat(" - ").concat(str2));
        System.out.println("Compare To: " + str1.compareTo(str4));
        System.out.println("Compare To Ignore Case: " + str1.compareToIgnoreCase(str4));

        char[] chars = str1.toCharArray();
        System.out.print("ToCharArray: ");
        for (char c : chars) {
            System.out.print(c + " ");
        }
        System.out.println();

        String[] split = str2.split(" ");
        System.out.print("Split: ");
        for (String s : split) {
            System.out.print(s + " | ");
        }
        System.out.println();

        String join = String.join("-", split);
        System.out.println("Join: " + join);

        int hash = str1.hashCode();
        System.out.println("HashCode: " + hash);

        byte[] bytes = str1.getBytes();
        System.out.print("GetBytes: ");
        for (byte b : bytes) {
            System.out.print(b + " ");
        }
        System.out.println();

        String formatted = String.format("Welcome %s to %s", "User", "Java");
        System.out.println("Formatted: " + formatted);

        System.out.println("Repeat: " + "Hi".repeat(3));

        StringBuilder sb = new StringBuilder(str1);
        System.out.println("Append: " + sb.append("!!!"));
        System.out.println("Insert: " + sb.insert(5, " Java"));
        System.out.println("Delete: " + sb.delete(5, 10));
        System.out.println("Reverse: " + sb.reverse());
    }
}



